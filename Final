local service = 892 -- Set your Platoboost Id 
local secret = "9b60a609-5703-440c-a56f-bf3ec1f5047e" -- Set Your Platoboost Api key
local useNonce = true
local onMessage = function(message, button)
    -- Update the Check Key button text based on the message
    if button then
        if message == "Key is invalid." then
            button.Text = "Invalid Key"
            button.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red for error
        elseif message == "Valid Key!" then
            button.Text = "Valid Key!"
            button.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green for success
            loadstring(game:HttpGet("https://raw.githubusercontent.com/BatusBey/Batus_Hub_Main/refs/heads/main/Main"))()
        else
            button.Text = "Check Key"  -- Reset to default text if needed
            button.TextColor3 = Color3.fromRGB(150, 150, 150)
        end
        
        -- Reset the button text after 1.5 seconds
        task.wait(1.5)
        button.Text = "Check Key"  -- Reset to original text
        button.TextColor3 = Color3.fromRGB(150, 150, 150)  -- Reset text color
    end

    -- Also show the message in the chat
    game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { Text = message })
end

repeat task.wait(1) until game:IsLoaded() or game.Players.LocalPlayer

local requestSending = false
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request, string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local cachedLink, cachedTime = "", 0
local HttpService = game:GetService("HttpService")

function lEncode(data)
    return HttpService:JSONEncode(data)
end

function lDecode(data)
    return HttpService:JSONDecode(data)
end

local function lDigest(input)
    local inputStr = tostring(input)
    local hash = {}
    for i = 1, #inputStr do
        table.insert(hash, string.byte(inputStr, i))
    end

    local hashHex = ""
    for _, byte in ipairs(hash) do
        hashHex = hashHex .. string.format("%02x", byte)
    end
    
    return hashHex
end

local host = "https://api.platoboost.com"
local hostResponse = fRequest({
    Url = host .. "/public/connectivity",
    Method = "GET"
})

if hostResponse.StatusCode ~= 200 or hostResponse.StatusCode ~= 429 then
    host = "https://api.platoboost.net"
end

function cacheLink()
    if cachedTime + (10 * 60) < fOsTime() then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = lEncode({
                service = service,
                identifier = lDigest(fGetHwid())
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })

        if response.StatusCode == 200 then
            local decoded = lDecode(response.Body)

            if decoded.success == true then
                cachedLink = decoded.data.url
                cachedTime = fOsTime()
                return true, cachedLink
            else
                onMessage(decoded.message)
                return false, decoded.message
            end
        elseif response.StatusCode == 429 then
            local msg = "you are being rate limited, please wait 20 seconds and try again."
            onMessage(msg)
            return false, msg
        end

        local msg = "Failed to cache link."
        onMessage(msg)
        return false, msg
    else
        return true, cachedLink
    end
end

cacheLink()

local generateNonce = function()
    local str = ""
    for _ = 1, 16 do
        str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
    end
    return str
end

for _ = 1, 5 do
    local oNonce = generateNonce()
    task.wait(0.2)
    if generateNonce() == oNonce then
        local msg = "platoboost nonce error."
        onMessage(msg)
        error(msg)
    end
end

local copyLink = function()
    local success, link = cacheLink()
    
    if success then
        print("SetClipBoard")
        fSetClipboard(link)
    end
end

local redeemKey = function(key)
    local nonce = generateNonce()
    local endpoint = host .. "/public/redeem/" .. fToString(service)

    local body = {
        identifier = lDigest(fGetHwid()),
        key = key
    }

    if useNonce then
        body.nonce = nonce
    end

    local response = fRequest({
        Url = endpoint,
        Method = "POST",
        Body = lEncode(body),
        Headers = {
            ["Content-Type"] = "application/json"
        }
    })

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body)
        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                        return true
                    else
                        onMessage("failed to verify integrity.")
                        return false
                    end    
                else
                    return true
                end
            else
                onMessage("key is invalid.")
                return false
            end
        else
            if fStringSub(decoded.message, 1, 27) == "unique constraint violation" then
                onMessage("you already have an active key, please wait for it to expire before redeeming it.")
                return false
            else
                onMessage(decoded.message)
                return false
            end
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.")
        return false
    else
        onMessage("server returned an invalid status code, please try again later.")
        return false
    end
end

local verifyKey = function(key)
    if requestSending == true then
        onMessage("a request is already being sent, please slow down.")
        return false
    else
        requestSending = true
    end

    local nonce = generateNonce()
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce
    end
    local response = fRequest({
        Url = endpoint,
        Method = "GET"
    })

    requestSending = false

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body)
        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    return true
                else
                    return true
                end
            else
                if fStringSub(key, 1, 4) == "FREE_" then
                    return redeemKey(key)
                else
                    onMessage("key is invalid.")
                    return false
                end
            end
        else
            onMessage(decoded.message)
            return false
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.")
        return false
    else
        onMessage("server returned an invalid status code, please try again later.")
        return false
    end
end

task.spawn(function()
    -- UI code begins here
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Create loading screen with a space theme
    local LoadingFrame = Instance.new("Frame")
    LoadingFrame.Size = UDim2.new(0, 400, 0, 200)
    LoadingFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    LoadingFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    LoadingFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 50)
    LoadingFrame.Parent = ScreenGui

    local LoadingCorner = Instance.new("UICorner")
    LoadingCorner.CornerRadius = UDim.new(0, 10)
    LoadingCorner.Parent = LoadingFrame

    local LoadingLabel = Instance.new("TextLabel")
    LoadingLabel.Size = UDim2.new(1, 0, 1, 0)
    LoadingLabel.Text = "Cooking Batus Hub..."
    LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    LoadingLabel.TextSize = 20
    LoadingLabel.BackgroundTransparency = 1
    LoadingLabel.Parent = LoadingFrame

    -- Simulate loading delay
    task.wait(2)
    LoadingFrame:Destroy()  -- Remove loading screen after 2 seconds

    -- Create the main UI frame
    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 400, 0, 300)
    Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 30)  -- Space theme dark blue
    Frame.BorderSizePixel = 0
    Frame.Active = true
    Frame.Draggable = true
    Frame.Parent = ScreenGui

    local FrameCorner = Instance.new("UICorner")
    FrameCorner.CornerRadius = UDim.new(0, 10)
    FrameCorner.Parent = Frame

    -- Close button
    local Close = Instance.new("TextButton")
    Close.Size = UDim2.new(0, 40, 0, 40)
    Close.Position = UDim2.new(1, -40, 0, 0)
    Close.BackgroundTransparency = 1
    Close.Text = "×"
    Close.TextScaled = true
    Close.TextColor3 = Color3.fromRGB(150, 150, 150)
    Close.Parent = Frame
    Close.MouseButton1Click:Connect(function()
       ScreenGui:Destroy()
    end)

    -- Title
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0, 30)
    Title.Position = UDim2.new(0, 0, 0.05, 0)
    Title.Text = "Batuş Hub - Key System"
    Title.TextSize = 18
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.BackgroundTransparency = 1
    Title.Parent = Frame

    -- Instructions
    local Instructions = Instance.new("TextLabel")
    Instructions.Size = UDim2.new(1, 0, 0, 30)
    Instructions.Position = UDim2.new(0, 0, 0.2, 0)
    Instructions.Text = "Enter Key To Access The Script"
    Instructions.TextSize = 13
    Instructions.TextColor3 = Color3.fromRGB(150, 150, 150)
    Instructions.BackgroundTransparency = 1
    Instructions.Parent = Frame

    -- Textbox for key input
    local TextBox = Instance.new("TextBox")
    TextBox.Size = UDim2.new(0.8, 0, 0.2, 0)
    TextBox.Position = UDim2.new(0.1, 0, 0.4, 0)
    TextBox.BackgroundColor3 = Color3.fromRGB(0, 0, 120)
    TextBox.PlaceholderText = "Enter Key..."
    TextBox.Text = ""
    TextBox.TextSize = 18
    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextBox.Parent = Frame
    TextBox.BackgroundTransparency = 0.2

    local TextBoxCorner = Instance.new("UICorner")
    TextBoxCorner.CornerRadius = UDim.new(0, 5)
    TextBoxCorner.Parent = TextBox

    -- Get Key button
    local GetKey = Instance.new("TextButton")
    GetKey.Size = UDim2.new(0.35, 0, 0.15, 0)
    GetKey.Position = UDim2.new(0.1, 0, 0.7, 0)
    GetKey.BackgroundColor3 = Color3.fromRGB(0, 0, 120)
    GetKey.Text = "Get Key"
    GetKey.TextSize = 18
    GetKey.TextColor3 = Color3.fromRGB(150, 150, 150)
    GetKey.Parent = Frame
    GetKey.BackgroundTransparency = 0.2

    local GetKeyCorner = Instance.new("UICorner")
    GetKeyCorner.CornerRadius = UDim.new(0, 5)
    GetKeyCorner.Parent = GetKey

    -- Check Key button
    local CheckKey = Instance.new("TextButton")
    CheckKey.Size = UDim2.new(0.35, 0, 0.15, 0)
    CheckKey.Position = UDim2.new(0.55, 0, 0.7, 0)
    CheckKey.BackgroundColor3 = Color3.fromRGB(0, 0, 120)
    CheckKey.Text = "Check Key"
    CheckKey.TextSize = 18
    CheckKey.TextColor3 = Color3.fromRGB(150, 150, 150)
    CheckKey.Parent = Frame
    CheckKey.BackgroundTransparency = 0.2

    local CheckKeyCorner = Instance.new("UICorner")
    CheckKeyCorner.CornerRadius = UDim.new(0, 5)
    CheckKeyCorner.Parent = CheckKey

    -- Button actions
    CheckKey.MouseButton1Click:Connect(function()
        -- Handle Check Key functionality as usual
        if TextBox.Text ~= "" then
            local verify = verifyKey(TextBox.Text)
            if verify then
                onMessage("Success", CheckKey)  -- Pass the button to onMessage function
                loadstring(game:HttpGet("https://pastebin.com/raw/DTrES0c6"))()
                ScreenGui:Destroy()  -- Destroy the GUI after successful key
            else
                onMessage("Key is invalid.", CheckKey)  -- Pass the button to onMessage function
            end
        else
            onMessage("Please enter a key", CheckKey)  -- Pass the button to onMessage function
        end
    end)
    
    GetKey.MouseButton1Click:Connect(function()
        -- Copy the link to the clipboard
        copyLink()

        -- Change the button text to "Copied To Clipboard"
        GetKey.Text = "Copied"
        GetKey.TextColor3 = Color3.fromRGB(0, 255, 0)  -- Change text color to green for success

        -- Wait for 1.5 seconds before resetting the text back to "Get Key"
        task.wait(1.5)

        -- Reset the button text and color back to the original state
        GetKey.Text = "Get Key"
        GetKey.TextColor3 = Color3.fromRGB(150, 150, 150)
    end)
end)
